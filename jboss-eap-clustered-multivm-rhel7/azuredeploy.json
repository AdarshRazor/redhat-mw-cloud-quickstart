{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine"
      }
    },
    "adminPasswordOrSSHKey": {
          "type": "securestring",
          "metadata": {
            "description": "Password or SSH key for the Virtual Machine"
          }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "jbossEAPUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the JBoss EAP Manager"
      }
    },
    "jbossEAPPassword": {
      "type": "securestring",
      "minLength": 10,
      "metadata": {
        "description": "Password for the JBoss EAP Manager"
      }
    },
    "rhelOSLicenseType": {	
      "type": "string",	
      "defaultValue": "PAYG",	
      "allowedValues": [	
        "PAYG",		
        "BYOS"
      ],	
      "metadata": {	
        "description": "Select the of RHEL OS License Type for deploying your Virtual Machine. Please read through the guide and make sure you follow the steps mentioned under section 'Licenses, Subscriptions and Costs' if you are selecting BYOS"	
      }	
    },
    "rhsmUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for Red Hat subscription Manager"
      }
    },
    "rhsmPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for Red Hat subscription Manager"
      }
    },
    "rhsmPoolEAP": {
      "type": "string",
      "metadata": {
        "description": "Red Hat Subscription Manager Pool ID (Should have EAP entitlement)"
      }
    },
    "rhsmPoolRHEL": {
      "type": "string",
      "metadata": {
        "description": "Red Hat Subscription Manager Pool ID (Should have RHEL entitlement). Mandartory if you select the BYOS RHEL OS License Type"
      },
      "defaultValue": ""
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
       "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
     },
     "defaultValue": "https://raw.githubusercontent.com/SpektraSystems/redhat-mw-cloud-quickstart/master/jboss-eap-clustered-multivm-rhel7/"
    },
    "_artifactsLocationSasToken": {
     "type": "securestring",
     "metadata": {
       "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
     },
     "defaultValue": ""
    },  
    "jbosseapstrgType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_D2S_v3",
        "Standard_D4S_v3",
        "Standard_D8S_v3",
        "Standard_D16S_v3",
        "Standard_D32S_v3",
        "Standard_D48S_v3",
        "Standard_D64S_v3",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of VMs to deploy"
      }
    }
  },
  "variables": {
    "scriptFileName": "jbosseap-setup-redhat.sh",
    "containerName": "eapblobcontainer",
    "singlequote": "'",
    "scriptStart": "su -c'sh ",
    "customScriptCommand": "[concat(variables('scriptStart'), variables('scriptFileName'), ' ')]",
    "scriptClose": "'",
    "loadBalancersName": "jbosseap-lb",
    "vmNamePAYG": "jbosseap-payg-server",
    "vmNameBYOS": "jbosseap-byos-server",
    "asName": "jbosseap-as",
    "skuName": "Aligned",
    "imagePublisher": "redhat",
    "imageOfferPAYG": "RHEL",
    "imageSkuPAYG": "7.7",
    "imageOfferBYOS": "rhel-byos",
    "imageSkuBYOS": "rhel-lvm77",
    "nicName": "[concat(uniquestring(resourceGroup().id), '-nic')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "jbosseap-server-subnet",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressName": "jbosseap-server-pip",
    "publicIPAddresslb": "lbpip",
    "publicIPAddresslbDNSName" : "[concat('lbpip-', uniqueString(resourceGroup().id))]",
    "publicIPAddressDNSName" : "[concat('jbosseap-server-pip-', uniqueString(resourceGroup().id))]",
    "publicIPAddressType": "Dynamic",
    "virtualNetworkName": "jbosseap-vnet",
    "backendPoolName": "jbosseap-server",
    "frontendName" : "LoadBalancerFrontEnd",
    "healthProbeEAP" : "eap-jboss-health",
    "healthProbeAdmin" : "eap-admin-health",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrSSHKey')]"
          }
        ]
      }
    },
    "networkSecurityGroupName": "jbosseap-nsg",
    "storageAccountName": "[concat('jbosstrg', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "apiVersion": "2019-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressName'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
          "name": "pipLoop",
          "count": "[parameters('numberOfInstances')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
        "domainNameLabel": "[concat(variables('publicIPAddressDNSName'), copyIndex())]"
       }
      }
    },
    {
      "apiVersion": "2019-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddresslb')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
        "domainNameLabel": "[variables('publicIPAddresslbDNSName')]"
      }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Port_8080",
            "properties": {
              "priority": 350,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "8080",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
              "name": "default-allow-22",
              "properties": {
                "priority": 340,
                "access": "Allow",
                "direction": "Inbound",
                "destinationPortRange": "22",
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*"
              }
          },
          {
            "name": "http_9990",
            "properties": {
              "priority": 360,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "9990",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "port_45700",
            "properties": {
              "priority": 370,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "45700",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "Port_7600",
            "properties": {
              "priority": 380,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "7600",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "Port_55200",
            "properties": {
              "priority": 390,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "55200",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "Port_45688",
            "properties": {
              "priority": 400,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "45688",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-11-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
          "name": "nicLoop",
          "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'), copyIndex())]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancersName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPAddressName'), copyIndex()))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"
              },
              "loadBalancerBackendAddressPools": [
               {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancersName'), variables('backendPoolName'))]"
               }
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('rhelOSLicenseType'),'PAYG')]",
      "apiVersion": "2019-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePAYG'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
          "name": "virtualMachineLoop",
          "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('asName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('asName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePAYG'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrSSHKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOfferPAYG')]",
            "sku": "[variables('imageSkuPAYG')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        }
      },
      "resources": [
        {
          "condition": "[equals(parameters('rhelOSLicenseType'),'PAYG')]",
          "type": "extensions",
          "name": "[concat('jbosseap-setup-extension-', copyIndex())]",
          "apiVersion": "2019-12-01",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmNamePAYG'), copyIndex()))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'),'scripts/', variables('scriptFileName'), parameters('_artifactsLocationSasToken'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat(variables('customScriptCommand'), parameters('adminUsername'),' ',parameters('jbossEAPUserName'),' ',variables('singlequote'),parameters('jbossEAPPassword'),variables('singlequote'),' ',parameters('rhelOSLicenseType'),' ',parameters('rhsmUserName'),' ',variables('singlequote'),parameters('rhsmPassword'),variables('singlequote'),' ', parameters('rhsmPoolEAP'),' ',reference(concat(variables('nicName'), copyIndex())).ipConfigurations[0].properties.privateIPAddress,' ',variables('storageAccountName'),' ',variables('containerName'),' ',base64(listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value), ' ', parameters('rhsmPoolRHEL'),' ', variables('scriptClose'))]"
            }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('rhelOSLicenseType'),'BYOS')]",
      "apiVersion": "2019-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameBYOS'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
          "name": "virtualMachineLoop",
          "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('asName'))]"
      ],
      "plan": {
          "name": "rhel-lvm77",
          "publisher": "redhat",
          "product": "rhel-byos"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('asName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNameBYOS'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrSSHKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOfferBYOS')]",
            "sku": "[variables('imageSkuBYOS')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        }
      },
      "resources": [
        {
          "condition": "[equals(parameters('rhelOSLicenseType'),'BYOS')]",
          "type": "extensions",
          "name": "[concat('jbosseap-setup-extension-', copyIndex())]",
          "apiVersion": "2019-12-01",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmNameBYOS'), copyIndex()))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'),'scripts/', variables('scriptFileName'), parameters('_artifactsLocationSasToken'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat(variables('customScriptCommand'), parameters('adminUsername'),' ',parameters('jbossEAPUserName'),' ',variables('singlequote'),parameters('jbossEAPPassword'),variables('singlequote'),' ',parameters('rhelOSLicenseType'),' ',parameters('rhsmUserName'),' ',variables('singlequote'),parameters('rhsmPassword'),variables('singlequote'),' ', parameters('rhsmPoolEAP'),' ',reference(concat(variables('nicName'), copyIndex())).ipConfigurations[0].properties.privateIPAddress,' ',variables('storageAccountName'),' ',variables('containerName'),' ',base64(listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value), ' ', parameters('rhsmPoolRHEL'),' ', variables('scriptClose'))]"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2018-06-01",
      "name": "[variables('loadBalancersName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddresslb'))]"
      ],
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddresslb'))]"
              },
              "privateIPAddressVersion": "IPv4"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[concat(variables('loadBalancersName'), '-rule1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadBalancersName'), variables('frontendName'))]"
              },
              "frontendPort": 80,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "protocol": "Tcp",
              "enableTcpReset": false,
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancersName'), variables('backendPoolName'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancersName'), variables('healthProbeEAP'))]"
              }
            }
          },
          {
              "name": "[concat(variables('loadBalancersName'), '-rule2')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadBalancersName'), variables('frontendName'))]"
                },
                "frontendPort": 9990,
                "backendPort": 9990,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancersName'), variables('backendPoolName'))]"
                },
                "probe": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancersName'), variables('healthProbeAdmin'))]"
                }
              }
            }
        ],
        "probes": [
          {
            "name": "[variables('healthProbeEAP')]",
            "properties": {
              "protocol": "Tcp",
              "port": 8080,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
              "name": "[variables('healthProbeAdmin')]",
              "properties": {
                "protocol": "Tcp",
                "port": 9990,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
        ]
      }
    },
    {
      "name": "[variables('asName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[parameters('location')]",
      "apiVersion": "2019-03-01",
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "[variables('skuName')]"
      }
    },
    {
      "name": "[variables('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "[parameters('jbosseapstrgType')]"
      },
      "kind": "Storage",
      "resources": [
        {
          "name": "[concat('default/', variables('containerName'))]",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ]
    }
  ],
  "outputs": {
      "appURL": {
        "type": "string",
        "value": "[concat('http://', reference(variables('publicIPAddresslb')).dnsSettings.fqdn, '/eap-session-replication/')]"
      }
    }
}